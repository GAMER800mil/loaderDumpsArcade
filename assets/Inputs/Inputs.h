#ifndef _INPUTS_H_
#define _INPUTS_H_

#include "stdafx.h"
#include "macros.h"

#define FOREACH_INPUT_CONFIG(INPUT_CONFIG)   		\
	INPUT_CONFIG(INPUT_ASYNC_KEY_STATE)		\
	INPUT_CONFIG(INPUT_DIRECT)		
	
enum INPUT_CONFIG_ENUM {
	FOREACH_INPUT_CONFIG(GENERATE_ENUM)
};

static const char *INPUT_CONFIG_ENUM_STRING[] = {
	FOREACH_INPUT_CONFIG(GENERATE_STRING)
};

#define FOREACH_INPUT_MANAGER(INPUT)   		\
	INPUT(P1_START)		\
	INPUT(P1_COIN)		\
	INPUT(P1_SERVICE)	\
	INPUT(P1_UP)		\
	INPUT(P1_DOWN)		\
	INPUT(P1_LEFT)		\
	INPUT(P1_RIGHT)		\
	INPUT(P1_BUTTON_1)	\
	INPUT(P1_BUTTON_2)	\
	INPUT(P1_BUTTON_3)	\
	INPUT(P1_BUTTON_4)	\
	INPUT(P1_BUTTON_5)	\
	INPUT(P1_BUTTON_6)	\
	INPUT(P2_START)		\
	INPUT(P2_COIN)		\
	INPUT(P2_SERVICE)	\
	INPUT(P2_UP)		\
	INPUT(P2_DOWN)		\
	INPUT(P2_LEFT)		\
	INPUT(P2_RIGHT)		\
	INPUT(P2_BUTTON_1)	\
	INPUT(P2_BUTTON_2)	\
	INPUT(P2_BUTTON_3)	\
	INPUT(P2_BUTTON_4)	\
	INPUT(P2_BUTTON_5)	\
	INPUT(P2_BUTTON_6)	\
	INPUT(TEST_MODE)	\
	INPUT(EXIT_CODE)	\
	INPUT(TEST_TILT1)	\
	INPUT(TEST_TILT2)	\
	INPUT(TEST_TILT3)	\
	INPUT(_SIZE_)	

enum INPUT_MANAGER_ENUM {
	FOREACH_INPUT_MANAGER(GENERATE_ENUM)
};

static const char *INPUT_MANAGER_ENUM_STRING[] = {
	FOREACH_INPUT_MANAGER(GENERATE_STRING)
};


class InputConfig {


public:

	 InputConfig();
	~InputConfig();

	INPUT_CONFIG_ENUM toEnum(std::string str);

private:

	map<std::string, INPUT_CONFIG_ENUM>  mapStringEnumInput = {
	   {INPUT_CONFIG_ENUM_STRING[0],  INPUT_ASYNC_KEY_STATE},
	   {INPUT_CONFIG_ENUM_STRING[1],  INPUT_DIRECT}
	};

/*
	map<std::string, INPUT_MANAGER_ENUM>  mapStringEnumInput = {
	   {INPUT_MANAGER_ENUM_STRING[0],  P1_START},
	   {INPUT_MANAGER_ENUM_STRING[1],  P1_COIN},
	   {INPUT_MANAGER_ENUM_STRING[2],  P1_SERVICE},
	   {INPUT_MANAGER_ENUM_STRING[3],  P1_UP},
	   {INPUT_MANAGER_ENUM_STRING[4],  P1_DOWN},
	   {INPUT_MANAGER_ENUM_STRING[5],  P1_LEFT},
	   {INPUT_MANAGER_ENUM_STRING[6],  P1_RIGHT},
	   {INPUT_MANAGER_ENUM_STRING[7],  P1_BUTTON_1},
	   {INPUT_MANAGER_ENUM_STRING[8],  P1_BUTTON_2},
	   {INPUT_MANAGER_ENUM_STRING[9],  P1_BUTTON_3},
	   {INPUT_MANAGER_ENUM_STRING[10], P1_BUTTON_4},
	   {INPUT_MANAGER_ENUM_STRING[11], P1_BUTTON_5},
	   {INPUT_MANAGER_ENUM_STRING[12], P1_BUTTON_6},
	   {INPUT_MANAGER_ENUM_STRING[13], P2_START},
	   {INPUT_MANAGER_ENUM_STRING[14], P2_COIN},
	   {INPUT_MANAGER_ENUM_STRING[15], P2_SERVICE},
	   {INPUT_MANAGER_ENUM_STRING[16], P2_UP},
	   {INPUT_MANAGER_ENUM_STRING[17], P2_DOWN},
	   {INPUT_MANAGER_ENUM_STRING[18], P2_LEFT},
	   {INPUT_MANAGER_ENUM_STRING[19], P2_RIGHT},
	   {INPUT_MANAGER_ENUM_STRING[20], P2_BUTTON_1},
	   {INPUT_MANAGER_ENUM_STRING[21], P2_BUTTON_2},
	   {INPUT_MANAGER_ENUM_STRING[22], P2_BUTTON_3},
	   {INPUT_MANAGER_ENUM_STRING[23], P2_BUTTON_4},
	   {INPUT_MANAGER_ENUM_STRING[24], P2_BUTTON_5},
	   {INPUT_MANAGER_ENUM_STRING[25], P2_BUTTON_6},
	   {INPUT_MANAGER_ENUM_STRING[26], TEST_MODE},
	   {INPUT_MANAGER_ENUM_STRING[27], EXIT_CODE},
	   {INPUT_MANAGER_ENUM_STRING[28], TEST_TILT1},
	   {INPUT_MANAGER_ENUM_STRING[29], TEST_TILT2},
	   {INPUT_MANAGER_ENUM_STRING[30], TEST_TILT3}
	};
	*/
};

#endif
