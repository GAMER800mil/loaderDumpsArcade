#ifndef _READ_RESOLUTION_DISPLAY_H_
#define _READ_RESOLUTION_DISPLAY_H_

#include "stdafx.h"
#include "macros.h"

#define FOREACH_RESOLUTION(RESOLUTION)   		\
	RESOLUTION(FULLSCREEN_NATIVE)			\
	RESOLUTION(FULLSCREEN)				\
	RESOLUTION(FULLSCREEN_ROTATION_90)		\
	RESOLUTION(FULLSCREEN_ROTATION_180)		\
	RESOLUTION(FULLSCREEN_ROTATION_270)		\
	RESOLUTION(WINDOWED)				\
	RESOLUTION(WINDOWED_CENTER)			\
	RESOLUTION(WINDOWED_CENTER_ROTATION_90)		\
	RESOLUTION(WINDOWED_CENTER_ROTATION_180)	\
	RESOLUTION(WINDOWED_CENTER_ROTATION_270)	\
	RESOLUTION(WINDOWED_ROTATION_90)		\
	RESOLUTION(WINDOWED_ROTATION_180)		\
	RESOLUTION(WINDOWED_ROTATION_270)

enum CONFIG_RESOLUTION_ENUM {
	FOREACH_RESOLUTION(GENERATE_ENUM)
};

static const char *CONFIG_RESOLUTION_ENUM_STRING[] = {
	FOREACH_RESOLUTION(GENERATE_STRING)
};

using namespace std;

class ResolutionDisplay
{
public:

	ResolutionDisplay();
	~ResolutionDisplay();
	const char* toString(CONFIG_RESOLUTION_ENUM i);
	CONFIG_RESOLUTION_ENUM toEnum(string i);


private:

	map<std::string, CONFIG_RESOLUTION_ENUM>  mapStringEnum = {
	   { "FULLSCREEN_NATIVE", FULLSCREEN_NATIVE},
	   { "FULLSCREEN", FULLSCREEN },
	   { "FULLSCREEN_ROTATION_90", FULLSCREEN_ROTATION_90},
	   { "FULLSCREEN_ROTATION_180", FULLSCREEN_ROTATION_180},
	   { "FULLSCREEN_ROTATION_270",FULLSCREEN_ROTATION_270},
	   { "WINDOWED", WINDOWED},
	   { "WINDOWED_ROTATION_90", WINDOWED_ROTATION_90},
	   { "WINDOWED_ROTATION_180", WINDOWED_ROTATION_180},
	   { "WINDOWED_ROTATION_270", WINDOWED_ROTATION_270},
	   { "WINDOWED_CENTER",WINDOWED_CENTER},
	   { "WINDOWED_CENTER_ROTATION_90", WINDOWED_CENTER_ROTATION_90},
	   { "WINDOWED_CENTER_ROTATION_180", WINDOWED_CENTER_ROTATION_180},
	   { "WINDOWED_CENTER_ROTATION_270", WINDOWED_CENTER_ROTATION_270 }
	};
	
};


#endif
