#ifndef _READ_RESOLUTION_DISPLAY_H_
#define _READ_RESOLUTION_DISPLAY_H_

#include "stdafx.h"

using namespace std;

typedef enum {
	FULLSCREEN_NATIVE = 0,
	FULLSCREEN,
	FULLSCREEN_ROTATION_90,
	FULLSCREEN_ROTATION_180,
	FULLSCREEN_ROTATION_270,
	WINDOWED,
	WINDOWED_CENTER,
	WINDOWED_CENTER_ROTATION_90,
	WINDOWED_CENTER_ROTATION_180,
	WINDOWED_CENTER_ROTATION_270,
	WINDOWED_ROTATION_90,
	WINDOWED_ROTATION_180,
	WINDOWED_ROTATION_270
} CONFIG_RESOLUTION_ENUM;

class ResolutionDisplay
{
public:

	ResolutionDisplay();
	~ResolutionDisplay();
	CONFIG_RESOLUTION_ENUM toEnum(string i);


private:

	map<std::string, CONFIG_RESOLUTION_ENUM>  mapStringEnum = {
	   { "FULLSCREEN_NATIVE", FULLSCREEN_NATIVE},
	   { "FULLSCREEN", FULLSCREEN },
	   { "FULLSCREEN_ROTATION_90", FULLSCREEN_ROTATION_90},
	   { "FULLSCREEN_ROTATION_180", FULLSCREEN_ROTATION_180},
	   { "FULLSCREEN_ROTATION_270",FULLSCREEN_ROTATION_270},
	   { "WINDOWED", WINDOWED},
	   { "WINDOWED_ROTATION_90", WINDOWED_ROTATION_90},
	   { "WINDOWED_ROTATION_180", WINDOWED_ROTATION_180},
	   { "WINDOWED_ROTATION_270", WINDOWED_ROTATION_270},
	   { "WINDOWED_CENTER",WINDOWED_CENTER},
	   { "WINDOWED_CENTER_ROTATION_90", WINDOWED_CENTER_ROTATION_90},
	   { "WINDOWED_CENTER_ROTATION_180", WINDOWED_CENTER_ROTATION_180},
	   { "WINDOWED_CENTER_ROTATION_270", WINDOWED_CENTER_ROTATION_270 }
	};
	
};


#endif
